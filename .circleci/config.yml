version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.3.1
  aws-s3: circleci/aws-s3@2.0.0

executors:
  app-executor:
    docker:
      - image: circleci/node:latest
    working_directory: ~/repo
terraform-executor:
    docker:
      - image: hashicorp/terraform:1.3.6
aliases:
  - &show-current-branch-name
    run:
      name: show current branch
      command: echo ${CIRCLE_BRANCH} 
  - &restore-cache
    restore_cache:
      key:
        -app-{{ checksum "package.json" }}
        -app-
  - &install-dependencies
    run:
      name: install dependencies
      command: npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python3-pip python-dev-is-python2 build-essential
  - &build-project
    run:
      name: Build Project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build Successful"

jobs: 
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
    
  # linting:
  #   executor: app-executor
  #   steps:
  #     - checkout
  #     - *show-current-branch-name
  #     - *restore-cache
  #     - run:
  #         name: Run linting
  #         command: npm run lint 
  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          command: |
            cd infra/
            terraform init -backend=false
            terraform fmt -check 
  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - run:
          name: Terraform Plan
          command: |
            cd artifacts/infra/
            terraform init 
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan
      - run:
          name: Terraform Apply
          command: |
            cd artifacts/infra/
            terraform workspace select ${CIRCLE_BRANCH} 
            terraform apply --auto-approve
            terraform output cinema_app_bucket_name > ../cinema_bucket_name.txt
            terraform output cloudfront_distribution_id > ../cloudfront_distribution_id.txt
      - persists_to_workspace:
          root: ./
          paths:
            - artifacts
      
  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/cinema_bucket_name.txt | sed 's/\"//g')
            echo AWS_BUCKET_NAME
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --region ${AWS_REGION} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --region ${AWS_REGION} --delete
            else [ "${CIRCLE_BRANCH}" == "develop" ]
              aws s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --region ${AWS_REGION} --delete
            fi
  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS Cloudfront
          command: |
            CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/cloudfront_distribution_id.txt | sed 's/\"//g')
            echo CLOUDFRONT_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --path /\*  
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --path /\*
            else [ "${CIRCLE_BRANCH}" == "develop" ]
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --path /\*
            fi 
  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Destroy
          command: |
            cd artifacts/infra/
            terraform init 
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform destroy        
workflows:
  build_and_deploy:
    jobs: 
      - build:
        filters:
          branches:
            only:
              - develop
              - staging
              - master
      - terraform-validate:
          requires:
            - build
          filters:
            branches:
              only: 
                - develop
                - staging
                - master
      - terraform-plan-and-apply:
          requires:
            - terraform-validate
          filters:
            branches:
              only: 
                - develop
                - staging
                - master
      - deploy-to-aws-s3:
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - develop
                - staging
                - master    
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master 
      - hold:
          type: approval
          requires:
            - deploy-to-aws-cloudfront 
      - terraform-destroy:
          requires:
            - hold
          filters:
            branches:
              only: 
                - develop
                - staging
                - master
