version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.3.1
  aws-s3: circleci/aws-s3@2.0.0
  sonarcloud: sonarsource/sonarcloud@1.1.1

executors:
  app-executor:
    docker:
      - image: circleci/node:latest
    working_directory: ~/repo

aliases:
  - &show-current-branch-name
    run:
      name: show current branch
      command: echo ${CIRCLE_BRANCH} 
  - &restore-cache
    restore_cache:
      key:
        -app-{{ checksum "package.json" }}
        -app-
  - &install-dependencies
    run:
      name: install dependencies
      command: npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python3-pip python-dev-is-python2 build-essential
  - &build-project
    run:
      name: Build Project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build Successful"

jobs: 
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
  sonar:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - sonar_token_variable_name:
          default: SONAR_TOKEN
          description: the name of the environment variable where the SonarCloud API token is stored
          type: env_var_name
    
  # linting:
  #   executor: app-executor
  #   steps:
  #     - checkout
  #     - *show-current-branch-name
  #     - *restore-cache
  #     - run:
  #         name: Run linting
  #         command: npm run lint 
          
  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws s3 sync ~/repo/build s3://${AWS_PROD_BUCKET} --region ${AWS_REGION} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws s3 sync ~/repo/build s3://${AWS_STAGING_BUCKET} --region ${AWS_REGION} --delete
            else [ "${CIRCLE_BRANCH}" == "develop" ]
              aws s3 sync ~/repo/build s3://${AWS_DEV_BUCKET} --region ${AWS_REGION} --delete
            fi
  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS Cloudfront
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${PROD_DISTRIBUTION_ID} --path /\*  
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --path /\*
            else [ "${CIRCLE_BRANCH}" == "develop" ]
              aws cloudfront create-invalidation --distribution-id ${DEV_DISTRIBUTION_ID} --path /\*
            fi        
workflows:
  build_and_deploy:
    jobs: 
      - build
      - sonar:
          requires:
            - build
      # - linting:
      #     requires:
      #       - build
        # filters:
        #   branches:
        #     only:
        #       - develop
        #       - staging
        #       - master
      - deploy-to-aws-s3:
          requires:
            - sonar
            # - linting
          filters:
            branches:
              only:
                - develop
                - staging
                - master    
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master  